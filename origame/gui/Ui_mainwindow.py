# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\origame\gui\ui_files\mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(986, 658)
        MainWindow.setStyleSheet("")
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowNestedDocks|QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        self.central_widget = QtWidgets.QWidget(MainWindow)
        self.central_widget.setObjectName("central_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.central_widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.title_frame = QtWidgets.QFrame(self.central_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_frame.sizePolicy().hasHeightForWidth())
        self.title_frame.setSizePolicy(sizePolicy)
        self.title_frame.setMinimumSize(QtCore.QSize(0, 21))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 219, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 219, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 219, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 219, 219))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.title_frame.setPalette(palette)
        self.title_frame.setAutoFillBackground(True)
        self.title_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.title_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.title_frame.setLineWidth(2)
        self.title_frame.setObjectName("title_frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.title_frame)
        self.horizontalLayout.setContentsMargins(1, 4, 9, 2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.title_label = QtWidgets.QLabel(self.title_frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label.sizePolicy().hasHeightForWidth())
        self.title_label.setSizePolicy(sizePolicy)
        self.title_label.setMinimumSize(QtCore.QSize(0, 13))
        self.title_label.setObjectName("title_label")
        self.horizontalLayout.addWidget(self.title_label)
        self.button_goto_parent = QtWidgets.QToolButton(self.title_frame)
        self.button_goto_parent.setObjectName("button_goto_parent")
        self.horizontalLayout.addWidget(self.button_goto_parent)
        self.verticalLayout_2.addWidget(self.title_frame)
        self.frame_2d = QtWidgets.QFrame(self.central_widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.frame_2d.sizePolicy().hasHeightForWidth())
        self.frame_2d.setSizePolicy(sizePolicy)
        self.frame_2d.setMinimumSize(QtCore.QSize(320, 200))
        self.frame_2d.setObjectName("frame_2d")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_2d)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.dummy_label = QtWidgets.QLabel(self.frame_2d)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dummy_label.sizePolicy().hasHeightForWidth())
        self.dummy_label.setSizePolicy(sizePolicy)
        self.dummy_label.setAcceptDrops(False)
        self.dummy_label.setText("")
        self.dummy_label.setPixmap(QtGui.QPixmap(".\\origame\\gui\\ui_files\\images/2dview.png"))
        self.dummy_label.setObjectName("dummy_label")
        self.horizontalLayout_2.addWidget(self.dummy_label)
        self.verticalLayout_2.addWidget(self.frame_2d)
        MainWindow.setCentralWidget(self.central_widget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 986, 21))
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_preferences = QtWidgets.QMenu(self.menu_file)
        self.menu_preferences.setObjectName("menu_preferences")
        self.menu_edit = QtWidgets.QMenu(self.menubar)
        self.menu_edit.setObjectName("menu_edit")
        self.menu_view = QtWidgets.QMenu(self.menubar)
        self.menu_view.setObjectName("menu_view")
        self.menu_part_view_mode = QtWidgets.QMenu(self.menu_view)
        self.menu_part_view_mode.setToolTip("")
        self.menu_part_view_mode.setObjectName("menu_part_view_mode")
        self.menu_help = QtWidgets.QMenu(self.menubar)
        self.menu_help.setObjectName("menu_help")
        self.menu_simulation = QtWidgets.QMenu(self.menubar)
        self.menu_simulation.setObjectName("menu_simulation")
        MainWindow.setMenuBar(self.menubar)
        self.scenario_browser_dock = QtWidgets.QDockWidget(MainWindow)
        self.scenario_browser_dock.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.scenario_browser_dock.setObjectName("scenario_browser_dock")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QtWidgets.QSplitter(self.dockWidgetContents)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.layoutWidget = QtWidgets.QWidget(self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.treeWidget = QtWidgets.QTreeWidget(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget.sizePolicy().hasHeightForWidth())
        self.treeWidget.setSizePolicy(sizePolicy)
        self.treeWidget.setAutoExpandDelay(-1)
        self.treeWidget.setHeaderHidden(True)
        self.treeWidget.setObjectName("treeWidget")
        item_0 = QtWidgets.QTreeWidgetItem(self.treeWidget)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        item_1 = QtWidgets.QTreeWidgetItem(item_0)
        item_2 = QtWidgets.QTreeWidgetItem(item_1)
        self.verticalLayout_5.addWidget(self.treeWidget)
        self.layoutWidget_2 = QtWidgets.QWidget(self.splitter)
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.search_text_box = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.search_text_box.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.search_text_box.setObjectName("search_text_box")
        self.horizontalLayout_3.addWidget(self.search_text_box)
        self.search_button = QtWidgets.QPushButton(self.layoutWidget_2)
        self.search_button.setObjectName("search_button")
        self.horizontalLayout_3.addWidget(self.search_button)
        self.verticalLayout_6.addLayout(self.horizontalLayout_3)
        self.label_2 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_6.addWidget(self.label_2)
        self.search_results_list_box = QtWidgets.QListWidget(self.layoutWidget_2)
        self.search_results_list_box.setObjectName("search_results_list_box")
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.search_results_list_box.addItem(item)
        self.verticalLayout_6.addWidget(self.search_results_list_box)
        self.verticalLayout.addWidget(self.splitter)
        self.scenario_browser_dock.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.scenario_browser_dock)
        self.log_panel_dock = QtWidgets.QDockWidget(MainWindow)
        self.log_panel_dock.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.log_panel_dock.setObjectName("log_panel_dock")
        self.dockWidgetContents_3 = QtWidgets.QWidget()
        self.dockWidgetContents_3.setObjectName("dockWidgetContents_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.dockWidgetContents_3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.log_panel_dock.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.log_panel_dock)
        self.help_dock = QtWidgets.QDockWidget(MainWindow)
        self.help_dock.setObjectName("help_dock")
        self.dockWidgetContents_4 = QtWidgets.QWidget()
        self.dockWidgetContents_4.setObjectName("dockWidgetContents_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.dockWidgetContents_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.help_view = ContextHelp(self.dockWidgetContents_4)
        self.help_view.setObjectName("help_view")
        self.verticalLayout_4.addWidget(self.help_view)
        self.help_dock.setWidget(self.dockWidgetContents_4)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.help_dock)
        self.object_properties_dock = QtWidgets.QDockWidget(MainWindow)
        self.object_properties_dock.setObjectName("object_properties_dock")
        self.dockWidgetContents_6 = QtWidgets.QWidget()
        self.dockWidgetContents_6.setObjectName("dockWidgetContents_6")
        self.object_properties_dock.setWidget(self.dockWidgetContents_6)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.object_properties_dock)
        self.event_queue_dock = QtWidgets.QDockWidget(MainWindow)
        self.event_queue_dock.setFloating(False)
        self.event_queue_dock.setObjectName("event_queue_dock")
        self.dockWidgetContents_2 = QtWidgets.QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.event_queue_dock.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.event_queue_dock)
        self.main_simulation_control_dock = QtWidgets.QDockWidget(MainWindow)
        self.main_simulation_control_dock.setObjectName("main_simulation_control_dock")
        self.dockWidgetContents_8 = QtWidgets.QWidget()
        self.dockWidgetContents_8.setObjectName("dockWidgetContents_8")
        self.main_simulation_control_dock.setWidget(self.dockWidgetContents_8)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.main_simulation_control_dock)
        self.status_bar = QtWidgets.QStatusBar(MainWindow)
        self.status_bar.setObjectName("status_bar")
        MainWindow.setStatusBar(self.status_bar)
        self.tool_bar = QtWidgets.QToolBar(MainWindow)
        self.tool_bar.setObjectName("tool_bar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tool_bar)
        self.batch_simulation_control_dock = QtWidgets.QDockWidget(MainWindow)
        self.batch_simulation_control_dock.setObjectName("batch_simulation_control_dock")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.batch_simulation_control_dock.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.batch_simulation_control_dock)
        self.alerts_dock = QtWidgets.QDockWidget(MainWindow)
        self.alerts_dock.setObjectName("alerts_dock")
        self.alerts_dock_content = QtWidgets.QWidget()
        self.alerts_dock_content.setObjectName("alerts_dock_content")
        self.alerts_dock.setWidget(self.alerts_dock_content)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.alerts_dock)
        self.action_quit = QtWidgets.QAction(MainWindow)
        self.action_quit.setObjectName("action_quit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.action_cut = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/cut.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_cut.setIcon(icon)
        self.action_cut.setObjectName("action_cut")
        self.actionPython_CLI = QtWidgets.QAction(MainWindow)
        self.actionPython_CLI.setCheckable(True)
        self.actionPython_CLI.setObjectName("actionPython_CLI")
        self.action_copy = QtWidgets.QAction(MainWindow)
        self.action_copy.setCheckable(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/copy.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_copy.setIcon(icon1)
        self.action_copy.setObjectName("action_copy")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionClose_All = QtWidgets.QAction(MainWindow)
        self.actionClose_All.setObjectName("actionClose_All")
        self.actionNext_Window = QtWidgets.QAction(MainWindow)
        self.actionNext_Window.setObjectName("actionNext_Window")
        self.actionPrevious_Window = QtWidgets.QAction(MainWindow)
        self.actionPrevious_Window.setObjectName("actionPrevious_Window")
        self.action_open = QtWidgets.QAction(MainWindow)
        self.action_open.setObjectName("action_open")
        self.action_save = QtWidgets.QAction(MainWindow)
        self.action_save.setObjectName("action_save")
        self.action_save_as = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/save_as.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_save_as.setIcon(icon2)
        self.action_save_as.setObjectName("action_save_as")
        self.actionToggle_Dockables = QtWidgets.QAction(MainWindow)
        self.actionToggle_Dockables.setCheckable(True)
        self.actionToggle_Dockables.setObjectName("actionToggle_Dockables")
        self.action_paste = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/paste.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_paste.setIcon(icon3)
        self.action_paste.setObjectName("action_paste")
        self.action_play_pause_sim = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/button_playsim.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_play_pause_sim.setIcon(icon4)
        self.action_play_pause_sim.setObjectName("action_play_pause_sim")
        self.actionPause = QtWidgets.QAction(MainWindow)
        self.actionPause.setObjectName("actionPause")
        self.action_step_sim = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/button_stepsim.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_step_sim.setIcon(icon5)
        self.action_step_sim.setObjectName("action_step_sim")
        self.action_reset_sim = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/button_resetsim.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_reset_sim.setIcon(icon6)
        self.action_reset_sim.setObjectName("action_reset_sim")
        self.action_new = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/file_new.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_new.setIcon(icon7)
        self.action_new.setObjectName("action_new")
        self.action_export = QtWidgets.QAction(MainWindow)
        self.action_export.setEnabled(True)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/export.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_export.setIcon(icon8)
        self.action_export.setObjectName("action_export")
        self.action_import = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icons/import.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_import.setIcon(icon9)
        self.action_import.setObjectName("action_import")
        self.actionAbout_2 = QtWidgets.QAction(MainWindow)
        self.actionAbout_2.setObjectName("actionAbout_2")
        self.action_user_manual = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icons/user_manual.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_user_manual.setIcon(icon10)
        self.action_user_manual.setObjectName("action_user_manual")
        self.action_python_reference = QtWidgets.QAction(MainWindow)
        self.action_python_reference.setObjectName("action_python_reference")
        self.action_parts_reference = QtWidgets.QAction(MainWindow)
        self.action_parts_reference.setObjectName("action_parts_reference")
        self.action_toggle_toolbar = QtWidgets.QAction(MainWindow)
        self.action_toggle_toolbar.setCheckable(True)
        self.action_toggle_toolbar.setChecked(False)
        self.action_toggle_toolbar.setObjectName("action_toggle_toolbar")
        self.action_python_tutorials = QtWidgets.QAction(MainWindow)
        self.action_python_tutorials.setObjectName("action_python_tutorials")
        self.action_show_examples = QtWidgets.QAction(MainWindow)
        self.action_show_examples.setVisible(False)
        self.action_show_examples.setObjectName("action_show_examples")
        self.actionSearch = QtWidgets.QAction(MainWindow)
        self.actionSearch.setObjectName("actionSearch")
        self.action_delete = QtWidgets.QAction(MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icons/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_delete.setIcon(icon11)
        self.action_delete.setObjectName("action_delete")
        self.action_undo = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/icons/undo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_undo.setIcon(icon12)
        self.action_undo.setObjectName("action_undo")
        self.action_redo = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icons/redo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_redo.setIcon(icon13)
        self.action_redo.setObjectName("action_redo")
        self.action_override_minimal = QtWidgets.QAction(MainWindow)
        self.action_override_minimal.setCheckable(True)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/icons/model_view_detail_level_minimal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_override_minimal.setIcon(icon14)
        self.action_override_minimal.setObjectName("action_override_minimal")
        self.action_override_full = QtWidgets.QAction(MainWindow)
        self.action_override_full.setCheckable(True)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/icons/model_view_detail_level_full.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_override_full.setIcon(icon15)
        self.action_override_full.setObjectName("action_override_full")
        self.action_override_none = QtWidgets.QAction(MainWindow)
        self.action_override_none.setCheckable(True)
        self.action_override_none.setChecked(True)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/icons/view_content_individual.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_override_none.setIcon(icon16)
        self.action_override_none.setObjectName("action_override_none")
        self.actionRun_no_reset = QtWidgets.QAction(MainWindow)
        self.actionRun_no_reset.setObjectName("actionRun_no_reset")
        self.action_debug = QtWidgets.QAction(MainWindow)
        self.action_debug.setCheckable(True)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/icons/debug.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_debug.setIcon(icon17)
        self.action_debug.setObjectName("action_debug")
        self.actionResume = QtWidgets.QAction(MainWindow)
        self.actionResume.setObjectName("actionResume")
        self.action_toggle_animation = QtWidgets.QAction(MainWindow)
        self.action_toggle_animation.setCheckable(True)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(":/icons/animation.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_toggle_animation.setIcon(icon18)
        self.action_toggle_animation.setObjectName("action_toggle_animation")
        self.action_clear_events = QtWidgets.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(":/icons/clear_queue.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_clear_events.setIcon(icon19)
        self.action_clear_events.setObjectName("action_clear_events")
        self.action_main_sim_settings = QtWidgets.QAction(MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(":/icons/button_simsettings.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_main_sim_settings.setIcon(icon20)
        self.action_main_sim_settings.setObjectName("action_main_sim_settings")
        self.action_run_sim = QtWidgets.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(":/icons/button_runmain.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_run_sim.setIcon(icon21)
        self.action_run_sim.setObjectName("action_run_sim")
        self.action_batch_simulation_settings = QtWidgets.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(":/icons/button_batchsettings.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_batch_simulation_settings.setIcon(icon22)
        self.action_batch_simulation_settings.setObjectName("action_batch_simulation_settings")
        self.action_start_batch_simulation = QtWidgets.QAction(MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(":/icons/button_runbatch.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_start_batch_simulation.setIcon(icon23)
        self.action_start_batch_simulation.setObjectName("action_start_batch_simulation")
        self.action_log_settings = QtWidgets.QAction(MainWindow)
        self.action_log_settings.setObjectName("action_log_settings")
        self.action_clear_settings = QtWidgets.QAction(MainWindow)
        self.action_clear_settings.setObjectName("action_clear_settings")
        self.actionRestore_Defaults = QtWidgets.QAction(MainWindow)
        self.actionRestore_Defaults.setObjectName("actionRestore_Defaults")
        self.action_restore_default = QtWidgets.QAction(MainWindow)
        self.action_restore_default.setObjectName("action_restore_default")
        self.action_save_settings = QtWidgets.QAction(MainWindow)
        self.action_save_settings.setObjectName("action_save_settings")
        self.action_restore_default_view = QtWidgets.QAction(MainWindow)
        self.action_restore_default_view.setObjectName("action_restore_default_view")
        self.menu_preferences.addAction(self.action_save_settings)
        self.menu_file.addAction(self.action_new)
        self.menu_file.addAction(self.action_open)
        self.menu_file.addAction(self.action_save)
        self.menu_file.addAction(self.action_save_as)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.menu_preferences.menuAction())
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_import)
        self.menu_file.addAction(self.action_export)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_quit)
        self.menu_view.addAction(self.menu_part_view_mode.menuAction())
        self.menu_view.addSeparator()
        self.menu_view.addAction(self.action_restore_default_view)
        self.menu_view.addSeparator()
        self.menu_view.addAction(self.action_toggle_toolbar)
        self.menu_help.addAction(self.action_user_manual)
        self.menu_help.addAction(self.action_show_examples)
        self.menu_help.addAction(self.action_parts_reference)
        self.menu_help.addAction(self.action_python_reference)
        self.menu_help.addAction(self.action_python_tutorials)
        self.menu_help.addSeparator()
        self.menu_help.addAction(self.actionAbout_2)
        self.menu_simulation.addAction(self.action_debug)
        self.menu_simulation.addAction(self.action_toggle_animation)
        self.menu_simulation.addSeparator()
        self.menu_simulation.addAction(self.action_play_pause_sim)
        self.menu_simulation.addAction(self.action_step_sim)
        self.menu_simulation.addSeparator()
        self.menu_simulation.addAction(self.action_reset_sim)
        self.menu_simulation.addAction(self.action_clear_events)
        self.menu_simulation.addSeparator()
        self.menu_simulation.addAction(self.action_main_sim_settings)
        self.menu_simulation.addAction(self.action_run_sim)
        self.menu_simulation.addSeparator()
        self.menu_simulation.addAction(self.action_batch_simulation_settings)
        self.menu_simulation.addAction(self.action_start_batch_simulation)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())
        self.menubar.addAction(self.menu_view.menuAction())
        self.menubar.addAction(self.menu_simulation.menuAction())
        self.menubar.addAction(self.menu_help.menuAction())
        self.tool_bar.addAction(self.action_new)
        self.tool_bar.addAction(self.action_open)
        self.tool_bar.addAction(self.action_save)
        self.tool_bar.addAction(self.action_save_as)
        self.tool_bar.addAction(self.action_import)
        self.tool_bar.addAction(self.action_export)
        self.tool_bar.addSeparator()
        self.tool_bar.addAction(self.action_reset_sim)
        self.tool_bar.addAction(self.action_clear_events)
        self.tool_bar.addAction(self.action_run_sim)
        self.tool_bar.addAction(self.action_play_pause_sim)
        self.tool_bar.addAction(self.action_step_sim)
        self.tool_bar.addAction(self.action_toggle_animation)
        self.tool_bar.addAction(self.action_debug)
        self.tool_bar.addAction(self.action_main_sim_settings)
        self.tool_bar.addSeparator()
        self.tool_bar.addAction(self.action_start_batch_simulation)
        self.tool_bar.addAction(self.action_batch_simulation_settings)
        self.tool_bar.addSeparator()
        self.tool_bar.addAction(self.action_user_manual)

        self.retranslateUi(MainWindow)
        self.action_toggle_toolbar.toggled['bool'].connect(self.tool_bar.setVisible) # type: ignore
        self.tool_bar.visibilityChanged['bool'].connect(self.action_toggle_toolbar.setChecked) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Scenario: [e:\\data\\tictactoe.db]"))
        self.title_label.setText(_translate("MainWindow", "Actor 2D View"))
        self.button_goto_parent.setToolTip(_translate("MainWindow", "Go to Parent Actor"))
        self.button_goto_parent.setStatusTip(_translate("MainWindow", "Go to Parent Actor"))
        self.button_goto_parent.setText(_translate("MainWindow", ".."))
        self.menu_file.setTitle(_translate("MainWindow", "File"))
        self.menu_preferences.setTitle(_translate("MainWindow", "Preferences"))
        self.menu_edit.setTitle(_translate("MainWindow", "&Edit"))
        self.menu_view.setTitle(_translate("MainWindow", "View"))
        self.menu_part_view_mode.setTitle(_translate("MainWindow", "Model View"))
        self.menu_help.setTitle(_translate("MainWindow", "Help"))
        self.menu_simulation.setTitle(_translate("MainWindow", "Simulation"))
        self.scenario_browser_dock.setWindowTitle(_translate("MainWindow", "Scenario Browser"))
        __sortingEnabled = self.treeWidget.isSortingEnabled()
        self.treeWidget.setSortingEnabled(False)
        self.treeWidget.topLevelItem(0).setText(0, _translate("MainWindow", "Root Actor"))
        self.treeWidget.topLevelItem(0).child(0).setText(0, _translate("MainWindow", "Actor 2"))
        self.treeWidget.topLevelItem(0).child(0).child(0).setText(0, _translate("MainWindow", "Actor 10"))
        self.treeWidget.topLevelItem(0).child(1).setText(0, _translate("MainWindow", "Actor 3"))
        self.treeWidget.topLevelItem(0).child(1).child(0).setText(0, _translate("MainWindow", "Actor 7"))
        self.treeWidget.topLevelItem(0).child(2).setText(0, _translate("MainWindow", "Actor 5"))
        self.treeWidget.topLevelItem(0).child(2).child(0).setText(0, _translate("MainWindow", "Actor 6"))
        self.treeWidget.topLevelItem(0).child(3).setText(0, _translate("MainWindow", "Actor 8"))
        self.treeWidget.topLevelItem(0).child(3).child(0).setText(0, _translate("MainWindow", "Actor 9"))
        self.treeWidget.setSortingEnabled(__sortingEnabled)
        self.search_text_box.setText(_translate("MainWindow", "Function"))
        self.search_button.setText(_translate("MainWindow", "Search"))
        self.label_2.setText(_translate("MainWindow", "To begin, start typing in the search box above"))
        __sortingEnabled = self.search_results_list_box.isSortingEnabled()
        self.search_results_list_box.setSortingEnabled(False)
        item = self.search_results_list_box.item(0)
        item.setText(_translate("MainWindow", "Actor1/Actor2/part2"))
        item = self.search_results_list_box.item(1)
        item.setText(_translate("MainWindow", "Actor1/Actor4/part5"))
        item = self.search_results_list_box.item(2)
        item.setText(_translate("MainWindow", "Actor1/Actor4/part5"))
        item = self.search_results_list_box.item(3)
        item.setText(_translate("MainWindow", "Actor1/Actor4/part5"))
        item = self.search_results_list_box.item(4)
        item.setText(_translate("MainWindow", "Actor1/Actor4/part5"))
        item = self.search_results_list_box.item(5)
        item.setText(_translate("MainWindow", "Actor2/Actor6/part1"))
        item = self.search_results_list_box.item(6)
        item.setText(_translate("MainWindow", "Actor2/Actor6/part1"))
        item = self.search_results_list_box.item(7)
        item.setText(_translate("MainWindow", "Actor2/part2"))
        item = self.search_results_list_box.item(8)
        item.setText(_translate("MainWindow", "Actor2/Actor6/part2"))
        self.search_results_list_box.setSortingEnabled(__sortingEnabled)
        self.log_panel_dock.setWindowTitle(_translate("MainWindow", "Application Log"))
        self.help_dock.setWindowTitle(_translate("MainWindow", "Context Help"))
        self.object_properties_dock.setWindowTitle(_translate("MainWindow", "Object Properties"))
        self.event_queue_dock.setWindowTitle(_translate("MainWindow", "Event Queue"))
        self.main_simulation_control_dock.setWindowTitle(_translate("MainWindow", "Main Simulation Control"))
        self.tool_bar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.batch_simulation_control_dock.setWindowTitle(_translate("MainWindow", "Batch Simulation Control"))
        self.alerts_dock.setWindowTitle(_translate("MainWindow", "Alerts"))
        self.action_quit.setText(_translate("MainWindow", "Exit"))
        self.action_quit.setToolTip(_translate("MainWindow", "Quit ORIGAME"))
        self.action_quit.setStatusTip(_translate("MainWindow", "Quit ORIGAME"))
        self.action_quit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.action_cut.setText(_translate("MainWindow", "Cut"))
        self.action_cut.setToolTip(_translate("MainWindow", "Cut the currently selected parts to app clipboard"))
        self.action_cut.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionPython_CLI.setText(_translate("MainWindow", "Part Console Editor"))
        self.actionPython_CLI.setShortcut(_translate("MainWindow", "Ctrl+Return"))
        self.action_copy.setText(_translate("MainWindow", "Copy"))
        self.action_copy.setToolTip(_translate("MainWindow", "Copy the currently selected parts to app clipboard"))
        self.action_copy.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionClose_All.setText(_translate("MainWindow", "Close All"))
        self.actionNext_Window.setText(_translate("MainWindow", "Next Window"))
        self.actionPrevious_Window.setText(_translate("MainWindow", "Previous Window"))
        self.action_open.setText(_translate("MainWindow", "Open..."))
        self.action_open.setIconText(_translate("MainWindow", "Open..."))
        self.action_open.setToolTip(_translate("MainWindow", "Open a scenario"))
        self.action_open.setStatusTip(_translate("MainWindow", "Open a scenario"))
        self.action_open.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.action_save.setText(_translate("MainWindow", "Save"))
        self.action_save.setToolTip(_translate("MainWindow", "Save the scenario"))
        self.action_save.setStatusTip(_translate("MainWindow", "Save the scenario"))
        self.action_save.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_save_as.setText(_translate("MainWindow", "Save As..."))
        self.action_save_as.setToolTip(_translate("MainWindow", "Save the scenario to a new file name"))
        self.action_save_as.setStatusTip(_translate("MainWindow", "Save the scenario to a new file name"))
        self.action_save_as.setShortcut(_translate("MainWindow", "Ctrl+Alt+S"))
        self.actionToggle_Dockables.setText(_translate("MainWindow", "Toggle Dockables"))
        self.actionToggle_Dockables.setShortcut(_translate("MainWindow", "Ctrl+F10"))
        self.action_paste.setText(_translate("MainWindow", "Paste"))
        self.action_paste.setToolTip(_translate("MainWindow", "Paste parts from app clipboard into this actor"))
        self.action_paste.setShortcut(_translate("MainWindow", "Ctrl+V"))
        self.action_play_pause_sim.setText(_translate("MainWindow", "Run/Pause"))
        self.action_play_pause_sim.setToolTip(_translate("MainWindow", "Run/Pause the simulation"))
        self.action_play_pause_sim.setStatusTip(_translate("MainWindow", "Run/Pause the simulation"))
        self.action_play_pause_sim.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actionPause.setText(_translate("MainWindow", "Pause"))
        self.action_step_sim.setText(_translate("MainWindow", "Step"))
        self.action_step_sim.setToolTip(_translate("MainWindow", "Step to the next event"))
        self.action_step_sim.setStatusTip(_translate("MainWindow", "Step to the next event"))
        self.action_reset_sim.setText(_translate("MainWindow", "Reset Sim"))
        self.action_reset_sim.setToolTip(_translate("MainWindow", "Reset the simulation"))
        self.action_reset_sim.setStatusTip(_translate("MainWindow", "Reset the simulation"))
        self.action_new.setText(_translate("MainWindow", "New"))
        self.action_new.setToolTip(_translate("MainWindow", "Create a new scenario"))
        self.action_new.setStatusTip(_translate("MainWindow", "Create a new scenario"))
        self.action_new.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.action_export.setText(_translate("MainWindow", "Export Selection..."))
        self.action_export.setIconText(_translate("MainWindow", "Export Selection..."))
        self.action_export.setToolTip(_translate("MainWindow", "Export the selected objects to a scenario"))
        self.action_export.setStatusTip(_translate("MainWindow", "Export the selected objects to a scenario"))
        self.action_export.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.action_import.setText(_translate("MainWindow", "Import Scenario..."))
        self.action_import.setIconText(_translate("MainWindow", "Import Scenario..."))
        self.action_import.setToolTip(_translate("MainWindow", "Import a scenario..."))
        self.action_import.setStatusTip(_translate("MainWindow", "Import a scenario..."))
        self.action_import.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionAbout_2.setText(_translate("MainWindow", "About"))
        self.actionAbout_2.setToolTip(_translate("MainWindow", "About ORIGAME"))
        self.actionAbout_2.setStatusTip(_translate("MainWindow", "About ORIGAME"))
        self.action_user_manual.setText(_translate("MainWindow", "User Manual"))
        self.action_user_manual.setToolTip(_translate("MainWindow", "Open the user manual"))
        self.action_user_manual.setStatusTip(_translate("MainWindow", "Open the user manual"))
        self.action_user_manual.setShortcut(_translate("MainWindow", "F1"))
        self.action_python_reference.setText(_translate("MainWindow", "Python Reference"))
        self.action_python_reference.setToolTip(_translate("MainWindow", "Open the Python reference"))
        self.action_python_reference.setStatusTip(_translate("MainWindow", "Open the Python reference"))
        self.action_parts_reference.setText(_translate("MainWindow", "Parts Reference"))
        self.action_parts_reference.setToolTip(_translate("MainWindow", "Open scenario parts reference"))
        self.action_parts_reference.setStatusTip(_translate("MainWindow", "Open scenario parts reference"))
        self.action_toggle_toolbar.setText(_translate("MainWindow", "Toolbar"))
        self.action_toggle_toolbar.setToolTip(_translate("MainWindow", "Toggle visibility of Toolbar"))
        self.action_toggle_toolbar.setStatusTip(_translate("MainWindow", "Toggle visibility of Toolbar"))
        self.action_python_tutorials.setText(_translate("MainWindow", "Python Tutorials"))
        self.action_python_tutorials.setToolTip(_translate("MainWindow", "Open Python tutorials"))
        self.action_python_tutorials.setStatusTip(_translate("MainWindow", "Open Python tutorials"))
        self.action_show_examples.setText(_translate("MainWindow", "Examples"))
        self.action_show_examples.setToolTip(_translate("MainWindow", "Open example scenarios"))
        self.action_show_examples.setStatusTip(_translate("MainWindow", "Open example scenarios"))
        self.actionSearch.setText(_translate("MainWindow", "Search Scenario..."))
        self.action_delete.setText(_translate("MainWindow", "Delete"))
        self.action_delete.setToolTip(_translate("MainWindow", "Delete the currently selected parts"))
        self.action_undo.setText(_translate("MainWindow", "Undo"))
        self.action_undo.setToolTip(_translate("MainWindow", "Undo the last change"))
        self.action_undo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.action_redo.setText(_translate("MainWindow", "Redo"))
        self.action_redo.setToolTip(_translate("MainWindow", "Redo the last change"))
        self.action_redo.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.action_override_minimal.setText(_translate("MainWindow", "Override Minimal"))
        self.action_override_minimal.setToolTip(_translate("MainWindow", "Show minimal detail level by overriding the real detail level"))
        self.action_override_minimal.setShortcut(_translate("MainWindow", "Ctrl+Shift+I"))
        self.action_override_full.setText(_translate("MainWindow", "Override Full"))
        self.action_override_full.setToolTip(_translate("MainWindow", "Show full detail level by overriding the real detail level"))
        self.action_override_full.setShortcut(_translate("MainWindow", "Ctrl+Shift+F"))
        self.action_override_none.setText(_translate("MainWindow", "Override None"))
        self.action_override_none.setToolTip(_translate("MainWindow", "Allow items to have their own detail level"))
        self.action_override_none.setShortcut(_translate("MainWindow", "Ctrl+Shift+D"))
        self.actionRun_no_reset.setText(_translate("MainWindow", "Run no reset"))
        self.actionRun_no_reset.setToolTip(_translate("MainWindow", "Run no reset"))
        self.action_debug.setText(_translate("MainWindow", "Debug"))
        self.action_debug.setToolTip(_translate("MainWindow", "Enable or disable debug mode"))
        self.action_debug.setStatusTip(_translate("MainWindow", "Enable or disable debug mode"))
        self.actionResume.setText(_translate("MainWindow", "Resume"))
        self.action_toggle_animation.setText(_translate("MainWindow", "Animation"))
        self.action_toggle_animation.setToolTip(_translate("MainWindow", "Enable or disable GUI animation during Main Sim run"))
        self.action_toggle_animation.setStatusTip(_translate("MainWindow", "Enable or disable GUI animation during Main Sim run"))
        self.action_clear_events.setText(_translate("MainWindow", "Clear Queue"))
        self.action_clear_events.setToolTip(_translate("MainWindow", "Clear the Main Sim event queue"))
        self.action_clear_events.setStatusTip(_translate("MainWindow", "Clear the Main Sim event queue"))
        self.action_main_sim_settings.setText(_translate("MainWindow", "Main Simulation Settings"))
        self.action_main_sim_settings.setToolTip(_translate("MainWindow", "Configure the Main Sim settings"))
        self.action_main_sim_settings.setStatusTip(_translate("MainWindow", "Configure the Main Sim settings"))
        self.action_run_sim.setText(_translate("MainWindow", "Run Simulation"))
        self.action_run_sim.setToolTip(_translate("MainWindow", "Run the Main simulation"))
        self.action_run_sim.setStatusTip(_translate("MainWindow", "Run a Main simulation"))
        self.action_run_sim.setShortcut(_translate("MainWindow", "Ctrl+M"))
        self.action_batch_simulation_settings.setText(_translate("MainWindow", "Batch Simulation Settings"))
        self.action_batch_simulation_settings.setToolTip(_translate("MainWindow", "Configure the Batch simulation engine"))
        self.action_batch_simulation_settings.setStatusTip(_translate("MainWindow", "Configure the Batch simulation engine"))
        self.action_start_batch_simulation.setText(_translate("MainWindow", "Start Batch Simulation"))
        self.action_start_batch_simulation.setToolTip(_translate("MainWindow", "Start a Batch simulation"))
        self.action_start_batch_simulation.setStatusTip(_translate("MainWindow", "Start a Batch simulation"))
        self.action_start_batch_simulation.setShortcut(_translate("MainWindow", "Ctrl+B"))
        self.action_log_settings.setText(_translate("MainWindow", "Log Settings"))
        self.action_clear_settings.setText(_translate("MainWindow", "Clear Settings"))
        self.actionRestore_Defaults.setText(_translate("MainWindow", "Restore Defaults"))
        self.action_restore_default.setText(_translate("MainWindow", "Restore Defaults"))
        self.action_save_settings.setText(_translate("MainWindow", "Save Settings As..."))
        self.action_save_settings.setToolTip(_translate("MainWindow", "Save application settings to external file"))
        self.action_save_settings.setStatusTip(_translate("MainWindow", "Save application settings to external file"))
        self.action_restore_default_view.setText(_translate("MainWindow", "Restore Default View"))
        self.action_restore_default_view.setStatusTip(_translate("MainWindow", "Restore Default View"))
from .context_help import ContextHelp
from . import gui_rc
